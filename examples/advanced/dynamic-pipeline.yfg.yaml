# In this example, parts of the pipeline will be determined dynamically by
# generating pipelines from generators and using their values

pipeline:
# Dynamically render a sub-pipeline that will render a different pipeline based
# on the configuration options specified in file/dynamic-config.yaml
- name: dynamic-fetch-ami-id
  gotemplate:
    vars:
      config:
        file: files/dynamic-config.yaml
    template: |
      {{ if eq .config.amiID.method "static" }}
      # Return the AMI ID specified in the configuration directly
      generator:
        value:
          input:
            value: '{{ .config.amiID.static }}'
      {{ else if eq .config.amiID.method "ssmParameter" }}
      # dynamically fetch the AMI ID from an ssm parameter
      pipeline:
      - name: fetch-ami-id
        exec:
          command: /bin/bash
          args:
            - -c
            - |
                aws ssm get-parameter --name '{{ .config.amiID.ssmParameter }}' --output json --query 'Parameter.Value'
      - name: extract-ami-id
        jq:
          input:
            ref: fetch-ami-id
          expr: '. | fromjson | .image_id'
      {{ else }}
      {{ printf "invalid amiID.method: %q" .config.amiID.method | fail }}
      {{ end }}

# Get the AMI ID using the pipeline that was created above
- name: ami-id
  pipeline:
    import:
      ref: dynamic-fetch-ami-id

- name: karpenter-values
  gotemplate:
    vars:
      eks:
        file: ../files/eks-vars.yaml
    template:
      serviceAccount:
        annotations:
          eks.amazonaws.com/role-arn: "{{ .eks.roleARN }}"
      settings:
        clusterName: "{{ .eks.clusterName }}"
        clusterEndpoint: "{{ .eks.clusterEndpoint }}"
        interruptionQueue: "{{ .eks.clusterName }}"

- name: helm
  helm:
    chart: oci://public.ecr.aws/karpenter/karpenter
    version: 1.0.0
    releaseName: karpenter
    namespace: karpenter
    includeCRDs: true
    values:
      - ref: karpenter-values

- name: karpenter-node-pool
  gotemplate:
    vars:
      eks:
        file: ../files/eks-vars.yaml
      amiID:
        ref: ami-id
    template: |
      apiVersion: karpenter.sh/v1
      kind: NodePool
      metadata:
        name: default
      spec:
        template:
          spec:
            nodeClassRef:
              group: karpenter.k8s.aws
              kind: EC2NodeClass
              name: default
      ---
      apiVersion: karpenter.k8s.aws/v1
      kind: EC2NodeClass
      metadata:
        name: default
      spec:
        role: "{{ .eks.nodeClassRole }}"
        amiSelectorTerms:
          - id: "{{ .amiID }}"
        securityGroupSelectorTerms:
          - tags:
              karpenter.sh/discovery: "{{ .eks.clusterName }}"
        subnetSelectorTerms:
          - tags:
              karpenter.sh/discovery: "{{ .eks.clusterName }}"
        tags:
          managed-by: karpenter

- name: output
  yaml:
    input:
      - ref: helm
      - ref: karpenter-node-pool
