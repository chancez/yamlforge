{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/chancez/yamlforge/pkg/config/config",
  "$ref": "#/$defs/Config",
  "$defs": {
    "AnyOrValue": {
      "oneOf": [
        {
          "type": "number"
        },
        {
          "type": "string"
        },
        {
          "type": "boolean"
        },
        {
          "type": "null"
        },
        {
          "type": "object"
        },
        {
          "type": "array"
        },
        {
          "$ref": "#/$defs/Value"
        }
      ],
      "description": "AnyOrValue can be either a number, string, boolean, null, object, array, or Value type."
    },
    "BoolOrValue": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/$defs/Value"
        }
      ],
      "description": "BoolOrValue can be either a boolean, or Value type."
    },
    "CELGenerator": {
      "properties": {
        "input": {
          "$ref": "#/$defs/ParsedValue",
          "description": "Input values are parsed then evaluated against the configure CEL expression."
        },
        "expr": {
          "$ref": "#/$defs/StringOrValue",
          "description": "Expr is a CEL expression evaluated with the input set to the variable 'val'."
        },
        "filter": {
          "$ref": "#/$defs/BoolOrValue",
          "description": "When filter is true, the CEL expression becomes a filter returning a boolean indicating if the input should be kept."
        },
        "invertFilter": {
          "$ref": "#/$defs/BoolOrValue",
          "description": "If Filter and InvertFilter is true, instead of keeping the result, it will be discarded."
        },
        "format": {
          "$ref": "#/$defs/StringOrValue",
          "description": "Format is the format the output should be returned as. If unspecified, it defaults to YAML."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "input",
        "expr"
      ],
      "description": "CELGenerator evaluates a CEL expression and returns the result of the expression."
    },
    "Config": {
      "oneOf": [
        {
          "required": [
            "pipeline"
          ],
          "title": "pipeline"
        },
        {
          "required": [
            "generator"
          ],
          "title": "generator"
        },
        {
          "required": [
            "import"
          ],
          "title": "import"
        },
        {
          "required": [
            "include"
          ],
          "title": "include"
        }
      ],
      "properties": {
        "pipeline": {
          "items": {
            "$ref": "#/$defs/Generator"
          },
          "type": "array",
          "description": "Pipeline is a list of generators to run. Generators can reference the output of previous generators using their name in any Value refs."
        },
        "generator": {
          "$ref": "#/$defs/Generator",
          "description": "Generator is a single generator, for simple use-cases that do not require a full pipeline."
        },
        "import": {
          "$ref": "#/$defs/Value",
          "description": "Import is a value containing a pipeline to import. Imported pipelines\nshare no references or variables with their parent pipeline."
        },
        "include": {
          "$ref": "#/$defs/Value",
          "description": "Include is a value containing a pipeline to include. Included pipelines\nshare the same context as their parent, meaning variables and references\nin the parent pipeline are available within the included pipeline,\nbehaving as if the included pipeline was directly written in the parent\npipeline.\nIf a included pipeline includes a generator with the same name as it's\nparent it will result in an error."
        },
        "vars": {
          "items": {
            "$ref": "#/$defs/NamedValue"
          },
          "type": "array",
          "description": "Vars defines variables that the pipeline is providing to the sub-pipeline."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Config defines a yamlforge configuration."
    },
    "ExecGenerator": {
      "properties": {
        "command": {
          "$ref": "#/$defs/StringOrValue",
          "description": "Command is the command to execute."
        },
        "args": {
          "items": {
            "$ref": "#/$defs/StringOrValue"
          },
          "type": "array",
          "description": "Args are the arguments to the command."
        },
        "env": {
          "items": {
            "$ref": "#/$defs/NamedValue"
          },
          "type": "array",
          "description": "Env is a list of environment variables to set for the command."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "command"
      ],
      "description": "ExecGenerator execs the command specified and returns the stdout of the program."
    },
    "FileGenerator": {
      "properties": {
        "path": {
          "type": "string",
          "description": "Path is the path relative to this pipeline file to read."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "path"
      ],
      "description": "FileGenerator reads files at the specified path and returns their output."
    },
    "Generator": {
      "oneOf": [
        {
          "required": [
            "value"
          ],
          "title": "value"
        },
        {
          "required": [
            "file"
          ],
          "title": "file"
        },
        {
          "required": [
            "exec"
          ],
          "title": "exec"
        },
        {
          "required": [
            "helm"
          ],
          "title": "helm"
        },
        {
          "required": [
            "kustomize"
          ],
          "title": "kustomize"
        },
        {
          "required": [
            "merge"
          ],
          "title": "merge"
        },
        {
          "required": [
            "gotemplate"
          ],
          "title": "gotemplate"
        },
        {
          "required": [
            "pipeline"
          ],
          "title": "pipeline"
        },
        {
          "required": [
            "jq"
          ],
          "title": "jq"
        },
        {
          "required": [
            "cel"
          ],
          "title": "cel"
        },
        {
          "required": [
            "jsonpatch"
          ],
          "title": "jsonpatch"
        },
        {
          "required": [
            "yaml"
          ],
          "title": "yaml"
        },
        {
          "required": [
            "json"
          ],
          "title": "json"
        }
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name is the name of this generator which other generators can reference this generator's output by."
        },
        "value": {
          "$ref": "#/$defs/AnyOrValue",
          "description": "Value is a simple generator that takes a value and returns it unaltered."
        },
        "file": {
          "$ref": "#/$defs/FileGenerator",
          "description": "File is a generator which reads files at the specified path and returns their output."
        },
        "exec": {
          "$ref": "#/$defs/ExecGenerator",
          "description": "Exec is a generator which execs the command specified and returns the stdout of the program."
        },
        "helm": {
          "$ref": "#/$defs/HelmGenerator",
          "description": "Helm is a generator which runs 'helm template' to render a Helm chart and returns the output."
        },
        "kustomize": {
          "$ref": "#/$defs/KustomizeGenerator",
          "description": "Kustomize is a generator which runs 'kustomize build' to render a Kustomization and returns the output."
        },
        "merge": {
          "$ref": "#/$defs/MergeGenerator",
          "description": "Merge is a generator which takes multiple inputs containing object-like data and deeply merges them together and returns the merged output."
        },
        "gotemplate": {
          "$ref": "#/$defs/GoTemplateGenerator",
          "description": "GoTemplate is a generator which renders Go 'text/template' templates and returns the output."
        },
        "pipeline": {
          "$ref": "#/$defs/PipelineGenerator",
          "description": "Pipeline executes other pipelines or generators and returns the output."
        },
        "jq": {
          "$ref": "#/$defs/JQGenerator",
          "description": "JQ is a generator which executes 'jq' and returns the output."
        },
        "cel": {
          "$ref": "#/$defs/CELGenerator",
          "description": "CEL is a generator which evaluates a CEL expression against the input."
        },
        "jsonpatch": {
          "$ref": "#/$defs/JSONPatchGenerator",
          "description": "JSONPatch is a generator which evaluates a JSONPatch against the input."
        },
        "yaml": {
          "$ref": "#/$defs/YAMLGenerator",
          "description": "YAML is a generator which returns it's inputs as YAML."
        },
        "json": {
          "$ref": "#/$defs/JSONGenerator",
          "description": "JSON is a generator which returns it's inputs as JSON."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "name"
      ],
      "description": "Generators execute some logic and produce output. Only one type of generator can be specified."
    },
    "GoTemplateGenerator": {
      "properties": {
        "template": {
          "$ref": "#/$defs/StringOrValue",
          "description": "Template is the template to render."
        },
        "vars": {
          "additionalProperties": {
            "$ref": "#/$defs/AnyOrValue"
          },
          "type": "object",
          "description": "Vars are input variables to the template."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "template"
      ],
      "description": "GoTemplateGenerator renders Go 'text/template' templates and returns the output."
    },
    "HelmGenerator": {
      "properties": {
        "releaseName": {
          "$ref": "#/$defs/StringOrValue",
          "description": "ReleaseName is the release name."
        },
        "chart": {
          "$ref": "#/$defs/StringOrValue",
          "description": "Chart is the Helm chart to install. Prefix with oci:// to use a chart stored in an OCI registry."
        },
        "version": {
          "$ref": "#/$defs/StringOrValue",
          "description": "Version is the version of the helm chart to install."
        },
        "repo": {
          "$ref": "#/$defs/StringOrValue",
          "description": "Repo is the repository to install the Helm chart from."
        },
        "namespace": {
          "$ref": "#/$defs/StringOrValue",
          "description": "Namespace is the Kubernetes namespace to use when rendering resources."
        },
        "includeCRDs": {
          "$ref": "#/$defs/BoolOrValue",
          "description": "IncludeCRDs specifies if CRDs are included in the templated output"
        },
        "apiVersions": {
          "items": {
            "$ref": "#/$defs/StringOrValue"
          },
          "type": "array",
          "description": "APIVersions are Kubernetes api versions used for Capabilities.APIVersions."
        },
        "values": {
          "items": {
            "$ref": "#/$defs/StringOrValue"
          },
          "type": "array",
          "description": "Values are the Helm values used as configuration for the Helm chart."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "releaseName",
        "chart"
      ],
      "description": "HelmGenerator runs 'helm template' to render a Helm chart and returns the output."
    },
    "JQGenerator": {
      "properties": {
        "expr": {
          "$ref": "#/$defs/StringOrValue",
          "description": "Expr is the jq expression to evaluate."
        },
        "input": {
          "$ref": "#/$defs/StringOrValue",
          "description": "Input is the JSON input for jq to execute the expression over."
        },
        "slurp": {
          "$ref": "#/$defs/BoolOrValue",
          "description": "Slurp configures jq to read all inputs into an array and use it as a single input value."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "input"
      ],
      "description": "JQGenerator executes 'jq' and returns the output."
    },
    "JSONGenerator": {
      "properties": {
        "input": {
          "items": {
            "$ref": "#/$defs/ParsedValue"
          },
          "type": "array",
          "description": "Inputs are the inputs to convert to JSON. If a single input produces multiple objects or multiple inputs are provided, a stream of YAML objects is returned."
        },
        "indent": {
          "type": "integer",
          "description": "Indent defines the indent level to use for the output."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "input"
      ],
      "description": "JSONGenerator returns it's inputs as JSON."
    },
    "JSONPatchGenerator": {
      "properties": {
        "input": {
          "$ref": "#/$defs/StringOrValue",
          "description": "Input is the value to apply the patch to. It must be JSON."
        },
        "patch": {
          "$ref": "#/$defs/StringOrValue",
          "description": "Patch is the JSON patch. If it is YAML, it will be automatically converted to JSON."
        },
        "merge": {
          "$ref": "#/$defs/BoolOrValue",
          "description": "If merge is true, then patch is interpreted as a JSON merge patch."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "input",
        "patch"
      ],
      "description": "JSONPatchGenerator evaluates a JSONPatch against the input."
    },
    "KustomizeGenerator": {
      "oneOf": [
        {
          "required": [
            "dir"
          ],
          "title": "dir"
        },
        {
          "required": [
            "url"
          ],
          "title": "url"
        }
      ],
      "properties": {
        "dir": {
          "$ref": "#/$defs/StringOrValue",
          "description": "Dir is the path to a directory containing 'kustomization.yaml' relative to the manifest."
        },
        "url": {
          "$ref": "#/$defs/StringOrValue",
          "description": "URL is a git repository URL with a path suffix containing a 'kustomization.yaml'."
        },
        "enableHelm": {
          "$ref": "#/$defs/BoolOrValue",
          "description": "EnableHelm enables use of the Helm chart inflator generator."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "KustomizeGenerator runs 'kustomize build' to render a Kustomization and returns the output."
    },
    "MapOrValue": {
      "oneOf": [
        {
          "type": "object"
        },
        {
          "$ref": "#/$defs/Value"
        }
      ],
      "description": "MapOrValue can be either a object, or Value type."
    },
    "MergeGenerator": {
      "properties": {
        "input": {
          "items": {
            "$ref": "#/$defs/MapOrValue"
          },
          "type": "array",
          "description": "Inputs are the inputs to merge. Inputs specified later in the list take precedence, overwriting values in earlier inputs."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "input"
      ],
      "description": "MergeGenerator takes multiple inputs containing object-like data and deeply merges them together and returns the merged output."
    },
    "NamedValue": {
      "oneOf": [
        {
          "required": [
            "var"
          ],
          "title": "var"
        },
        {
          "required": [
            "ref"
          ],
          "title": "ref"
        },
        {
          "required": [
            "file"
          ],
          "title": "file"
        },
        {
          "required": [
            "env"
          ],
          "title": "env"
        },
        {
          "required": [
            "value"
          ],
          "title": "value"
        }
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name is the name of this variable."
        },
        "var": {
          "type": "string",
          "description": "Var allows defining variables that can be externally provided to a pipeline."
        },
        "ref": {
          "type": "string",
          "description": "Ref takes the name of a previous stage in the pipeline and returns the output of that stage."
        },
        "file": {
          "type": "string",
          "description": "File takes a path relative to this pipeline file to read and returns the content of the file specified."
        },
        "env": {
          "type": "string",
          "description": "Env takes the name of an environment variable and returns its value."
        },
        "value": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "number"
            },
            {
              "type": "array"
            },
            {
              "type": "object"
            }
          ],
          "description": "Value simply returns the value specified. It can be any valid YAML/JSON type (string, boolean, number, array, object)."
        },
        "ignoreMissing": {
          "type": "boolean",
          "description": "IgnoreMissing specifies if the generator should ignore missing references or files. If set to true, the generator will return an empty string instead of an error."
        },
        "default": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "number"
            },
            {
              "type": "array"
            },
            {
              "type": "object"
            }
          ],
          "description": "Default specifies the default value to use if a ref, variable, or file is\nmissing. Has no effect unless ignoreMissing is true.\nIt can be any valid YAML/JSON type ( string, boolean, number, array, object)."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "name"
      ],
      "description": "NamedValue is a Value with a name."
    },
    "ParsedValue": {
      "oneOf": [
        {
          "required": [
            "var"
          ],
          "title": "var"
        },
        {
          "required": [
            "ref"
          ],
          "title": "ref"
        },
        {
          "required": [
            "file"
          ],
          "title": "file"
        },
        {
          "required": [
            "env"
          ],
          "title": "env"
        },
        {
          "required": [
            "value"
          ],
          "title": "value"
        }
      ],
      "properties": {
        "format": {
          "type": "string",
          "enum": [
            "yaml",
            "json"
          ],
          "description": "Format defines the format to parse the retrieved value as. Valid options\nare yaml or json. Defaults to yaml if unspecified, or if the value\nreferences a file, it will attempt to use the file extension to determine\nthe correct format.",
          "default": "yaml"
        },
        "var": {
          "type": "string",
          "description": "Var allows defining variables that can be externally provided to a pipeline."
        },
        "ref": {
          "type": "string",
          "description": "Ref takes the name of a previous stage in the pipeline and returns the output of that stage."
        },
        "file": {
          "type": "string",
          "description": "File takes a path relative to this pipeline file to read and returns the content of the file specified."
        },
        "env": {
          "type": "string",
          "description": "Env takes the name of an environment variable and returns its value."
        },
        "value": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "number"
            },
            {
              "type": "array"
            },
            {
              "type": "object"
            }
          ],
          "description": "Value simply returns the value specified. It can be any valid YAML/JSON type (string, boolean, number, array, object)."
        },
        "ignoreMissing": {
          "type": "boolean",
          "description": "IgnoreMissing specifies if the generator should ignore missing references or files. If set to true, the generator will return an empty string instead of an error."
        },
        "default": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "number"
            },
            {
              "type": "array"
            },
            {
              "type": "object"
            }
          ],
          "description": "Default specifies the default value to use if a ref, variable, or file is\nmissing. Has no effect unless ignoreMissing is true.\nIt can be any valid YAML/JSON type ( string, boolean, number, array, object)."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "format"
      ],
      "description": "ParsedValue provides parsed values to generators."
    },
    "PipelineGenerator": {
      "oneOf": [
        {
          "required": [
            "pipeline"
          ],
          "title": "pipeline"
        },
        {
          "required": [
            "generator"
          ],
          "title": "generator"
        },
        {
          "required": [
            "import"
          ],
          "title": "import"
        },
        {
          "required": [
            "include"
          ],
          "title": "include"
        }
      ],
      "properties": {
        "pipeline": {
          "items": {
            "$ref": "#/$defs/Generator"
          },
          "type": "array",
          "description": "Pipeline is a list of generators to run. Generators can reference the output of previous generators using their name in any Value refs."
        },
        "generator": {
          "$ref": "#/$defs/Generator",
          "description": "Generator is a single generator, for simple use-cases that do not require a full pipeline."
        },
        "import": {
          "$ref": "#/$defs/Value",
          "description": "Import is a value containing a pipeline to import. Imported pipelines\nshare no references or variables with their parent pipeline."
        },
        "include": {
          "$ref": "#/$defs/Value",
          "description": "Include is a value containing a pipeline to include. Included pipelines\nshare the same context as their parent, meaning variables and references\nin the parent pipeline are available within the included pipeline,\nbehaving as if the included pipeline was directly written in the parent\npipeline.\nIf a included pipeline includes a generator with the same name as it's\nparent it will result in an error."
        },
        "vars": {
          "items": {
            "$ref": "#/$defs/NamedValue"
          },
          "type": "array",
          "description": "Vars defines variables that the pipeline is providing to the sub-pipeline."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "PipelineGenerator executes other generators in a pipeline or singular context."
    },
    "StringOrValue": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/Value"
        }
      ],
      "description": "StringOrValue can be either a string, or Value type."
    },
    "Value": {
      "oneOf": [
        {
          "required": [
            "var"
          ],
          "title": "var"
        },
        {
          "required": [
            "ref"
          ],
          "title": "ref"
        },
        {
          "required": [
            "file"
          ],
          "title": "file"
        },
        {
          "required": [
            "env"
          ],
          "title": "env"
        },
        {
          "required": [
            "value"
          ],
          "title": "value"
        }
      ],
      "properties": {
        "var": {
          "type": "string",
          "description": "Var allows defining variables that can be externally provided to a pipeline."
        },
        "ref": {
          "type": "string",
          "description": "Ref takes the name of a previous stage in the pipeline and returns the output of that stage."
        },
        "file": {
          "type": "string",
          "description": "File takes a path relative to this pipeline file to read and returns the content of the file specified."
        },
        "env": {
          "type": "string",
          "description": "Env takes the name of an environment variable and returns its value."
        },
        "value": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "number"
            },
            {
              "type": "array"
            },
            {
              "type": "object"
            }
          ],
          "description": "Value simply returns the value specified. It can be any valid YAML/JSON type (string, boolean, number, array, object)."
        },
        "ignoreMissing": {
          "type": "boolean",
          "description": "IgnoreMissing specifies if the generator should ignore missing references or files. If set to true, the generator will return an empty string instead of an error."
        },
        "default": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            },
            {
              "type": "number"
            },
            {
              "type": "array"
            },
            {
              "type": "object"
            }
          ],
          "description": "Default specifies the default value to use if a ref, variable, or file is\nmissing. Has no effect unless ignoreMissing is true.\nIt can be any valid YAML/JSON type ( string, boolean, number, array, object)."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Value provides inputs to generators."
    },
    "YAMLGenerator": {
      "properties": {
        "input": {
          "items": {
            "$ref": "#/$defs/ParsedValue"
          },
          "type": "array",
          "description": "Inputs are the inputs to convert to YAML. If a single input produces multiple objects or multiple inputs are provided, a stream of YAML documents is returned."
        },
        "indent": {
          "type": "integer",
          "description": "Indent defines the indent level to use for the output."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "input"
      ],
      "description": "YAMLGenerator returns it's inputs as YAML."
    }
  }
}